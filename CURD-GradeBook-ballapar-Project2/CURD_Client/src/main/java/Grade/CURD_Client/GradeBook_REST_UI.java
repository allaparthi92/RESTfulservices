/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Grade.CURD_Client;


import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.UniformInterfaceException;

import javax.ws.rs.core.Response;
import javax.swing.JFrame;
import javax.xml.bind.JAXBException;

import java.net.URI;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JLabel;
import javax.swing.JTextField;


public class GradeBook_REST_UI extends JFrame {
    
    private static final Logger LOG = LoggerFactory.getLogger(GradeBook_REST_UI.class);
    
    private GradeBookClient appointment_CRUD_rest_client;
    
    private URI resourceURI;
    
    static Converter converter = new Converter();

    /**
     * Creates new form Appointment_REST_UI
     */
    public GradeBook_REST_UI() {
        LOG.info("Creating a GradeBook_REST_UI object");
        initComponents();
        
        appointment_CRUD_rest_client = new GradeBookClient();
    }
    
    private String convertFormToXMLString(){
        GradeBook appointment = new GradeBook();
        if (!studentid.getText().equals("")){
            appointment.setStudentid(Integer.parseInt(studentid.getText()));
        }
        if (!studentname.getText().equals("")){
        	appointment.setStudentname(studentname.getText());
        }
        
        if (!assignmentname.getText().equals("")){
        	appointment.setAssignemntname((assignmentname.getText()));
        }
     
        if (!feedback.getText().equals("")){
        	appointment.setFeedback((feedback.getText()));
        }
        if (!grade.getText().equals("")){
        	appointment.setGrade(Integer.parseInt(grade.getText()));
        }   
        appointment.setAssignemnttype("Exam");
        
        appointment.setGradebookid(1);
            
        String xmlString = Converter.convertFromObjectToXml(appointment, appointment.getClass());
        
        return xmlString;
    }
    
    private void populateForm(ClientResponse clientResponse){
        LOG.info("Populating the UI with the Appointment info");
        
        String      entity = clientResponse.getEntity(String.class);
        
        LOG.debug("The Client Response entity is {}", entity);
        
        try{
            if ((clientResponse.getStatus() == Response.Status.OK.getStatusCode()) ||
                (clientResponse.getStatus() == Response.Status.CREATED.getStatusCode())){
            	GradeBook appointment = (GradeBook)Converter.convertFromXmlToObject(entity, GradeBook.class);
                LOG.debug("The Client Response appointment object is {}", appointment);
                
                // Populate Appointment info
                studentid.setText(Integer.toString(appointment.getStudentid()));
                studentname.setText(appointment.getStudentname());
                assignmentname.setText(appointment.getAssignemntname());
            } else {
                studentname.setText("");
                assignmentname.setText("");
            }
            
            // Populate HTTP Header Information
            HTTPStatusCode.setText(Integer.toString(clientResponse.getStatus()));
            Mediatype.setText(clientResponse.getType().toString());
            
            // The Location filed is only populated when a Resource is created
            if (clientResponse.getStatus() == Response.Status.CREATED.getStatusCode()){
                location.setText(clientResponse.getLocation().toString());
            } else {
                location.setText("");
            }
            
        } catch (JAXBException e){
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        IbIstudentid = new javax.swing.JLabel();
        IbIstudentname = new javax.swing.JLabel();
        IbIassignmentname = new javax.swing.JLabel();
        studentid = new javax.swing.JTextField();
        studentname = new javax.swing.JTextField();
        assignmentname = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        HTTPStatusCode = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        location = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        Mediatype = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Action");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Add Grade");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Retrieve Grade");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("Update Grade");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setText("Delete Grade");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13));

        IbIstudentid.setText("studentid");

        IbIstudentname.setText("studentname");

        IbIassignmentname.setText("taskname");

        studentid.setName("studentid"); // NOI18N
        studentid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        studentname.setName("studentname"); // NOI18N
        studentname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        
        assignmentname.setName("assignmentname"); // NOI18N
        assignmentname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					jButton1ActionPerformed(evt);
				} catch (UniformInterfaceException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (JAXBException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        jLabel5.setText("HTTP Status Code");

        HTTPStatusCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel7.setText("Location");

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel8.setText("HTTP Header Info");

        location.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel9.setText("Media Type");

        Mediatype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });
        
        JLabel lblGrade = new JLabel("grade");
        
        grade = new JTextField();
        grade.setColumns(10);
        
        JLabel lblFeedback = new JLabel("feedback");
        
        feedback = new JTextField();
        feedback.setColumns(10);

        GroupLayout layout = new GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(31)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(jRadioButton1)
        						.addComponent(jRadioButton4)
        						.addComponent(jRadioButton3)
        						.addComponent(jRadioButton2)
        						.addGroup(layout.createSequentialGroup()
        							.addGap(10)
        							.addComponent(jLabel1)))
        					.addGap(95)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(IbIstudentname)
        						.addComponent(IbIassignmentname)
        						.addComponent(lblGrade)
        						.addComponent(lblFeedback)
        						.addComponent(IbIstudentid))
        					.addGap(29)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        							.addGroup(layout.createSequentialGroup()
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        									.addComponent(jLabel2)
        									.addComponent(studentid, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)))
        							.addComponent(assignmentname))
        						.addComponent(studentname, GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
        						.addComponent(feedback, GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
        						.addComponent(grade, GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)))
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap(30, Short.MAX_VALUE)
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(jLabel7)
        						.addComponent(jLabel5))
        					.addGap(28)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(HTTPStatusCode, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
        							.addGap(18)
        							.addComponent(jLabel9)
        							.addGap(18)
        							.addComponent(Mediatype, GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
        						.addComponent(location, 500, 500, 500))))
        			.addContainerGap())
        		.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        			.addContainerGap(374, Short.MAX_VALUE)
        			.addComponent(jButton1)
        			.addGap(241))
        		.addGroup(layout.createSequentialGroup()
        			.addGap(275)
        			.addComponent(jLabel8)
        			.addContainerGap(301, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(15)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(jLabel2)
        					.addComponent(studentid, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addComponent(jLabel1))
        				.addComponent(IbIstudentid))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jRadioButton1)
        				.addComponent(IbIstudentname)
        				.addComponent(studentname, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jRadioButton2)
        				.addComponent(IbIassignmentname)
        				.addComponent(assignmentname, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jRadioButton3)
        				.addComponent(lblGrade)
        				.addComponent(grade, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jRadioButton4)
        				.addComponent(lblFeedback)
        				.addComponent(feedback, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(37)
        					.addComponent(jButton1)
        					.addGap(91)
        					.addComponent(jLabel8)
        					.addGap(34)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(HTTPStatusCode, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jLabel9)
        						.addComponent(Mediatype, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.RELATED, 36, Short.MAX_VALUE))
        				.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(jLabel5)
        					.addGap(31)))
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(location, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel7))
        			.addGap(36))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        LOG.info("Selecting radio button {}", jRadioButton1.getText());
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        LOG.info("Selecting radio button {}", jRadioButton2.getText());
    }//GEN-LAST:event_jRadioButton2ActionPerformed
      
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) throws UniformInterfaceException, JAXBException {//GEN-FIRST:event_jButton1ActionPerformed
        LOG.info("Invoking REST Client based on selection");
        
        String appointmentID = studentid.getText();
        String name= assignmentname.getText();
        
        if (jRadioButton1.isSelected()){
            LOG.debug("Invoking {} action", jRadioButton1.getText());//Create
            
            ClientResponse clientResponse = appointment_CRUD_rest_client.createAppointment(this.convertFormToXMLString());
            
            resourceURI = clientResponse.getLocation();
            LOG.debug("Retrieved location {}", resourceURI);
            studentid.setText("");
            studentname.setText("");
            assignmentname.setText("");
            grade.setText("");
            feedback.setText("");
            HTTPStatusCode.setText(Integer.toString(clientResponse.getStatus()));
            
            Mediatype.setText(clientResponse.getType().toString());
            if (clientResponse.getStatus() == Response.Status.CREATED.getStatusCode()){
            	location.setText(clientResponse.getLocation().toString());
            } else {
            	location.setText("");
            }
         
           
         
        } else if (jRadioButton2.isSelected()) {
            LOG.debug("Invoking {} action", jRadioButton2.getText());// Read
                    
            ClientResponse clientResponse = appointment_CRUD_rest_client.retrieveAppointment(ClientResponse.class, appointmentID,name);
            String      entity = clientResponse.getEntity(String.class);
            resourceURI = clientResponse.getLocation();
            LOG.debug("Retrieved location {}", resourceURI);
            if(!appointmentID.equals("")&& !name.equals("")){
            	if (clientResponse.getStatus() != Response.Status.OK.getStatusCode()){
                  	return;
                  }
            	 GradeBook gb = (GradeBook) converter.convertFromXmlToObject(entity,GradeBook.class);
            	 
                
                 LOG.debug("Retrieved location {}", resourceURI);
                 studentid.setText(gb.getStudentid().toString());
                 studentname.setText(gb.getStudentname());
                 assignmentname.setText(gb.getAssignemntname());
                 grade.setText(gb.getGrade().toString());
                 feedback.setText(gb.getFeedback());
                 HTTPStatusCode.setText(Integer.toString(clientResponse.getStatus()));
                 location.setText("");
                 Mediatype.setText(clientResponse.getType().toString());
                 
            }
            else
            	 	HTTPStatusCode.setText(Integer.toString(clientResponse.getStatus()));
            
            		Mediatype.setText(clientResponse.getType().toString());
            		if (clientResponse.getStatus() == Response.Status.NOT_FOUND.getStatusCode()){
            			location.setText("");
                    	
                    } else {
                    	location.setText(clientResponse.getLocation().toString());
                    }
        } else if (jRadioButton3.isSelected()) {
            LOG.debug("Invoking {} action", jRadioButton3.getText());//Update
            
            ClientResponse clientResponse = appointment_CRUD_rest_client.updateAppointment(this.convertFormToXMLString(), appointmentID);
            
 
            studentid.setText("");
            studentname.setText("");
            assignmentname.setText("");
            grade.setText("");
            feedback.setText("");
            HTTPStatusCode.setText(Integer.toString(clientResponse.getStatus()));
            
            Mediatype.setText(clientResponse.getType().toString());
            if (clientResponse.getStatus() == Response.Status.CREATED.getStatusCode()){
            	location.setText(clientResponse.getLocation().toString());
            } else {
            	location.setText("");
            }
            
            
        } else if (jRadioButton4.isSelected()) {
            LOG.debug("Invoking {} action", jRadioButton4.getText());//Delete
            
            ClientResponse clientResponse = appointment_CRUD_rest_client.deleteAppointment(appointmentID,name);
            
            HTTPStatusCode.setText(Integer.toString(clientResponse.getStatus()));
            
            Mediatype.setText(clientResponse.getType().toString());
           
            	location.setText("");
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        LOG.info("Selecting radio button {}", jRadioButton3.getText());
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        LOG.info("Selecting radio button {}", jRadioButton4.getText());
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GradeBook_REST_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GradeBook_REST_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GradeBook_REST_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GradeBook_REST_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GradeBook_REST_UI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel IbIstudentid;
    private javax.swing.JLabel IbIstudentname;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel IbIassignmentname;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JTextField studentid;
    private javax.swing.JTextField studentname;
    private javax.swing.JTextField HTTPStatusCode;
    private javax.swing.JTextField assignmentname;
    private javax.swing.JTextField location;
    private javax.swing.JTextField Mediatype;
    private JTextField grade;
    private JTextField feedback;
}
